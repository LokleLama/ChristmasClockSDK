// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// transmit //
// -------- //

#define transmit_wrap_target 1
#define transmit_wrap 11

#define transmit_cycles 14
#define transmit_cycles_per_bit 3

static const uint16_t transmit_program_instructions[] = {
    0xa142, //  0: nop                    side 0 [1] 
            //     .wrap_target
    0xe24d, //  1: set    y, 13           side 0 [2] 
    0xa242, //  2: nop                    side 0 [2] 
    0x0282, //  3: jmp    y--, 2          side 0 [2] 
    0x002a, //  4: jmp    !x, 10          side 0     
    0xa042, //  5: nop                    side 0     
    0xf24d, //  6: set    y, 13           side 1 [2] 
    0xa242, //  7: nop                    side 0 [2] 
    0x1287, //  8: jmp    y--, 7          side 1 [2] 
    0x0020, //  9: jmp    !x, 0           side 0     
    0x6021, // 10: out    x, 1            side 0     
    0x0026, // 11: jmp    !x, 6           side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program transmit_program = {
    .instructions = transmit_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config transmit_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + transmit_wrap_target, offset + transmit_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void transmit_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = transmit_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    float div = clock_get_hz(clk_sys) / (freq *2 *transmit_cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

