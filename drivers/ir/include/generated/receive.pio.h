// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// receive //
// ------- //

#define receive_wrap_target 0
#define receive_wrap 15

static const uint16_t receive_program_instructions[] = {
            //     .wrap_target
    0x4040, //  0: in     y, 32           side 0     
    0xa02b, //  1: mov    x, !null        side 0     
    0xa0c3, //  2: mov    isr, null       side 0     
    0x3020, //  3: wait   0 pin, 0        side 2     
    0x4801, //  4: in     pins, 1         side 1     
    0x10c8, //  5: jmp    pin, 8          side 2     
    0x0045, //  6: jmp    x--, 5          side 0     
    0x0000, //  7: jmp    0               side 0     
    0xa049, //  8: mov    y, !x           side 0     
    0xa022, //  9: mov    x, y            side 0     
    0x024a, // 10: jmp    x--, 10         side 0 [2] 
    0x4801, // 11: in     pins, 1         side 1     
    0xa022, // 12: mov    x, y            side 0     
    0x10d0, // 13: jmp    pin, 16         side 2     
    0x10c9, // 14: jmp    pin, 9          side 2     
    0x004e, // 15: jmp    x--, 14         side 0     
            //     .wrap
    0x0052, // 16: jmp    x--, 18         side 0     
    0x0000, // 17: jmp    0               side 0     
    0x10d0, // 18: jmp    pin, 16         side 2     
    0x0009, // 19: jmp    9               side 0     
};

#if !PICO_NO_HARDWARE
static const struct pio_program receive_program = {
    .instructions = receive_program_instructions,
    .length = 20,
    .origin = -1,
};

static inline pio_sm_config receive_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + receive_wrap_target, offset + receive_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

#include "hardware/clocks.h"
#include "stdio.h"
#include "stdlib.h"
static inline void receive_program_init(PIO pio, uint sm, uint offset, uint pin, uint debug_pins) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, debug_pins, 2, true);   // Debug pins
    pio_sm_config c = receive_program_get_default_config(offset);
    sm_config_set_in_shift(
        &c,
        false,          // left right
        true,           // enable autopush
        32              // autopush after 32 bits
    );
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin);
    sm_config_set_sideset_pins(&c, debug_pins);                     // Debug pins
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, debug_pins);
    pio_gpio_init(pio, debug_pins +1);
    sm_config_set_clkdiv(&c, 100);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

