.program transmit
.side_set 1

.define public cycles           14
.define public cycles_per_bit   3

start_pause_long:
    nop                           side 0 [cycles_per_bit -2]

.wrap_target
start_pause:
    set y, (cycles -1)            side 0 [cycles_per_bit -1]
start_pause_loop:
    nop                           side 0 [cycles_per_bit -1]
    jmp y-- start_pause_loop      side 0 [cycles_per_bit -1]

    jmp !x end_pause              side 0
    nop                           side 0 [cycles_per_bit -3]

start_one:
    set y, (cycles -1)            side 1 [cycles_per_bit -1]
start_one_loop:
    nop                           side 0 [cycles_per_bit -1]
    jmp y-- start_one_loop        side 1 [cycles_per_bit -1]

    jmp !x start_pause_long       side 0
end_pause:
    out x, 1                      side 0
    jmp !x start_one              side 0
.wrap


% c-sdk {
#include "hardware/clocks.h"

static inline void transmit_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = transmit_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    float div = clock_get_hz(clk_sys) / (freq *2 *transmit_cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
